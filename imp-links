Env configurations

https://help.liferay.com/hc/en-us/articles/360028818632-Factory-Configurations 
https://learn.liferay.com/dxp/latest/en/building-applications/tooling/liferay-workspace/configuring-liferay-workspace.html 
https://learn.liferay.com/dxp/latest/en/installation-and-upgrades/installing-liferay/using-liferay-docker-images.html
https://learn.liferay.com/dxp/latest/en/building-applications/tooling/liferay-workspace/configuring-liferay-workspace.html?highlight=environment%20variables


import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class ConnectionPool {
    public static DataSource getDataSource() throws Exception {
        Context context = new InitialContext();
        Context envCtx = (Context) context.lookup("java:comp/env");
        String jdbcUrl = (String) envCtx.lookup("jdbc_url");
        String username = (String) envCtx.lookup("jdbc_username");
        String password = (String) envCtx.lookup("jdbc_password");

        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(jdbcUrl);
        config.setUsername(username);
        config.setPassword(password);
        config.setDriverClassName("com.mysql.jdbc.Driver");
        config.setMaximumPoolSize(10);

        return new HikariDataSource(config);
    }
}

jdbc.default.connection.pool.provider=hikaricp
jdbc.default.jndi.name=jdbc/LiferayPool

public class MyDataSource extends com.zaxxer.hikari.HikariDataSource {

   public MyDataSource() {
      Context initContext;
      try {
         initContext = new InitialContext();
         Context envContext = (Context) initContext.lookup("java:/comp/env");
         setJdbcUrl(envContext.lookup("jdbc/datasource/url").toString());
         setUsername(envContext.lookup("jdbc/datasource/username").toString());
         setPassword(envContext.lookup("jdbc/datasource/password").toString());
         setDriverClassName(envContext.lookup("jdbc/datasource/driverClassName").toString());
         setMaximumPoolSize(Integer.parseInt(envContext.lookup("jdbc/datasource/maxActive").toString()));
         setMinimumIdle(Integer.parseInt(envContext.lookup("jdbc/datasource/minIdle").toString()));
         setIdleTimeout(Integer.parseInt(envContext.lookup("jdbc/datasource/idleTimeout").toString()));
         setConnectionTimeout(Integer.parseInt(envContext.lookup("jdbc/datasource/connectionTimeout").toString()));
      } catch (NamingException e) {
         e.printStackTrace();
      }
   }
}


<Resource name="jdbc/MyCustomDataSource" auth="Container"
          type="javax.sql.DataSource"
          factory="com.zaxxer.hikari.HikariJNDIFactory"
          dataSourceClassName="com.mysql.cj.jdbc.MysqlDataSource"
          maximumPoolSize="10"
          jdbcUrl="jdbc:mysql://localhost:3306/mydatabase" />
          
          import com.liferay.portal.kernel.dao.jdbc.DataAccess;
import com.liferay.portal.kernel.dao.jdbc.DataSourceFactory;
import com.liferay.portal.kernel.dao.jdbc.PoolConnectionHandler;
import com.liferay.portal.kernel.dao.jdbc.pool.BaseDataSource;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

public class MyDataSource extends BaseDataSource {

    public MyDataSource() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:mysql://localhost:3306/mydatabase");
        config.setUsername("root");
        config.setPassword("mypassword");

        setDataSource(new HikariDataSource(config));
    }

    @Override
    public Connection getConnection() throws SQLException {
        return super.getConnection();
    }

}

public class CustomDataSource implements DataSource {

    private final DataSource dataSource;

    public CustomDataSource() {
        // initialize the datasource
        dataSource = createDataSource();
    }

    private DataSource createDataSource() {
        // create and configure the datasource
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:mysql://localhost/mydatabase");
        config.setUsername("myuser");
        config.setPassword("mypassword");
        config.setMaximumPoolSize(10);
        return new HikariDataSource(config);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return dataSource.getConnection();
    }

    @Override
    public Connection getConnection(String username, String password) throws SQLException {
        return dataSource.getConnection(username, password);
    }

    // other methods from the javax.sql.DataSource interface

}



plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'software.amazon.awssdk:rds:2.16.48' // AWS SDK RDS dependency
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
    }
}

import software.amazon.awssdk.auth.credentials.*;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.rds.RdsClient;
import software.amazon.awssdk.services.rds.model.*;

public class IAMSecretKeyReader {

    public static String retrieveIAMUserSecretKey() {
        // Create an instance of the AWS SDK RDS client
        RdsClient rdsClient = RdsClient.builder().region(Region.AWS_GLOBAL).build();

        // Set the name of your AWS RDS IAM user
        String iamUserName = "<IAM_USER_NAME>";

        // Create a request to list the IAM database authentication credentials
        ListDBClusterAuthTokensRequest request = ListDBClusterAuthTokensRequest.builder()
                .dbClusterIdentifier("<DB_CLUSTER_IDENTIFIER>")
                .maxRecords(1)
                .filter(i -> i.attributeName("username").attributeValues(iamUserName))
                .build();

        // Retrieve the IAM user secret key from AWS RDS IAM
        ListDBClusterAuthTokensResponse response = rdsClient.listDBClusterAuthTokens(request);
        String secretKey = response.nextToken().toString(); // Assuming only one token is retrieved

        // Close the AWS SDK RDS client
        rdsClient.close();

        return secretKey;
    }

    public static void main(String[] args) {
        String secretKey = retrieveIAMUserSecretKey();
        System.out.println("IAM User Secret Key: " + secretKey);
    }
}

import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;

public class RDSSecretKeyReader {

    public static String retrieveIAMUserSecretKey(String secretName) {
        SecretsManagerClient secretsManagerClient = SecretsManagerClient.builder()
                .region(Region.AWS_GLOBAL)
                .build();

        GetSecretValueRequest request = GetSecretValueRequest.builder()
                .secretId(secretName)
                .build();

        GetSecretValueResponse response = secretsManagerClient.getSecretValue(request);
        String secretKey = response.secretString();

        secretsManagerClient.close();

        return secretKey;
    }

    public static void main(String[] args) {
        String secretName = "<SECRET_NAME>";

        String secretKey = retrieveIAMUserSecretKey(secretName);
        System.out.println("IAM User Secret Key: " + secretKey);
    }
}

import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ec2.Ec2Client;
import software.amazon.awssdk.services.ec2.model.*;

public class AWSEC2InfoPrinter {
    public static void main(String[] args) {
        // Create an instance of the AWS EC2 client
        Ec2Client ec2Client = Ec2Client.builder()
                .region(Region.AWS_GLOBAL)
                .build();

        // Describe instances
        DescribeInstancesResponse response = ec2Client.describeInstances();

        // Iterate over the reservations and instances
        for (Reservation reservation : response.reservations()) {
            for (Instance instance : reservation.instances()) {
                // Retrieve instance details
                String instanceId = instance.instanceId();
                String publicDnsName = instance.publicDnsName();
                String privateIpAddress = instance.privateIpAddress();
                String region = instance.placement().availabilityZone();
                String organization = instance.tags().stream()
                        .filter(tag -> tag.key().equals("Organization"))
                        .findFirst()
                        .map(Tag::value)
                        .orElse("Unknown");

                // Print instance information
                System.out.println("Instance ID: " + instanceId);
                System.out.println("Public DNS Name: " + publicDnsName);
                System.out.println("Private IP Address: " + privateIpAddress);
                System.out.println("Region: " + region);
                System.out.println("Organization: " + organization);
                System.out.println("Active Ports:");

                // Describe security groups to retrieve active ports
                DescribeSecurityGroupsResponse securityGroupsResponse = ec2Client.describeSecurityGroups(
                        DescribeSecurityGroupsRequest.builder()
                                .filters(Filter.builder()
                                        .name("instance-id")
                                        .values(instanceId)
                                        .build())
                                .build()
                );

                for (SecurityGroup securityGroup : securityGroupsResponse.securityGroups()) {
                    for (IpPermission ipPermission : securityGroup.ipPermissions()) {
                        System.out.println("- Protocol: " + ipPermission.ipProtocol());
                        System.out.println("  From Port: " + ipPermission.fromPort());
                        System.out.println("  To Port: " + ipPermission.toPort());
                    }
                }

                System.out.println(); // Add empty line between instances
            }
        }

        // Close the EC2 client
        ec2Client.close();
    }
}



import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ec2.Ec2Client;
import software.amazon.awssdk.services.ec2.model.*;

public class AWSEC2InfoPrinter {
    public static void main(String[] args) {
        try {
            // Create an instance of the AWS EC2 client
            Ec2Client ec2Client = Ec2Client.builder()
                    .region(Region.AWS_GLOBAL)
                    .build();

            // Describe instances
            DescribeInstancesResponse response = ec2Client.describeInstances();

            // Iterate over the reservations and instances
            for (Reservation reservation : response.reservations()) {
                for (Instance instance : reservation.instances()) {
                    // Retrieve instance details
                    String instanceId = instance.instanceId();
                    String publicDnsName = instance.publicDnsName();
                    String privateIpAddress = instance.privateIpAddress();
                    String region = instance.placement().availabilityZone();
                    String organization = instance.tags().stream()
                            .filter(tag -> tag.key().equals("Organization"))
                            .findFirst()
                            .map(Tag::value)
                            .orElse("Unknown");

                    // Print instance information
                    System.out.println("Instance ID: " + instanceId);
                    System.out.println("Public DNS Name: " + publicDnsName);
                    System.out.println("Private IP Address: " + privateIpAddress);
                    System.out.println("Region: " + region);
                    System.out.println("Organization: " + organization);
                    System.out.println("Active Ports:");

                    // Describe security groups to retrieve active ports
                    DescribeSecurityGroupsResponse securityGroupsResponse = ec2Client.describeSecurityGroups(
                            DescribeSecurityGroupsRequest.builder()
                                    .filters(Filter.builder()
                                            .name("instance-id")
                                            .values(instanceId)
                                            .build())
                                    .build()
                    );

                    for (SecurityGroup securityGroup : securityGroupsResponse.securityGroups()) {
                        for (IpPermission ipPermission : securityGroup.ipPermissions()) {
                            System.out.println("- Protocol: " + ipPermission.ipProtocol());
                            System.out.println("  From Port: " + ipPermission.fromPort());
                            System.out.println("  To Port: " + ipPermission.toPort());
                        }
                    }

                    System.out.println(); // Add empty line between instances
                }
            }

            // Close the EC2 client
            ec2Client.close();
        } catch (Ec2Exception e) {
            System.err.println("An error occurred while retrieving EC2 information: " + e.getMessage());
        } catch (SdkClientException e) {
            System.err.println("An error occurred while communicating with AWS services: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
        }
    }
}


The type software.amazon.awssdk.core.exception.SdkClientException cannot be resolved. It is indirectly referenced from required .class files

The method build() is undefined for the type Ec2ClientBuilder

The type software.amazon.awssdk.utils.builder.CopyableBuilder cannot be resolved. It is indirectly referenced from required .class files

The method build() is undefined for the type Filter.Builder
