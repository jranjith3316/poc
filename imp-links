Env configurations

https://help.liferay.com/hc/en-us/articles/360028818632-Factory-Configurations 
https://learn.liferay.com/dxp/latest/en/building-applications/tooling/liferay-workspace/configuring-liferay-workspace.html 
https://learn.liferay.com/dxp/latest/en/installation-and-upgrades/installing-liferay/using-liferay-docker-images.html
https://learn.liferay.com/dxp/latest/en/building-applications/tooling/liferay-workspace/configuring-liferay-workspace.html?highlight=environment%20variables


import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class ConnectionPool {
    public static DataSource getDataSource() throws Exception {
        Context context = new InitialContext();
        Context envCtx = (Context) context.lookup("java:comp/env");
        String jdbcUrl = (String) envCtx.lookup("jdbc_url");
        String username = (String) envCtx.lookup("jdbc_username");
        String password = (String) envCtx.lookup("jdbc_password");

        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(jdbcUrl);
        config.setUsername(username);
        config.setPassword(password);
        config.setDriverClassName("com.mysql.jdbc.Driver");
        config.setMaximumPoolSize(10);

        return new HikariDataSource(config);
    }
}

jdbc.default.connection.pool.provider=hikaricp
jdbc.default.jndi.name=jdbc/LiferayPool

public class MyDataSource extends com.zaxxer.hikari.HikariDataSource {

   public MyDataSource() {
      Context initContext;
      try {
         initContext = new InitialContext();
         Context envContext = (Context) initContext.lookup("java:/comp/env");
         setJdbcUrl(envContext.lookup("jdbc/datasource/url").toString());
         setUsername(envContext.lookup("jdbc/datasource/username").toString());
         setPassword(envContext.lookup("jdbc/datasource/password").toString());
         setDriverClassName(envContext.lookup("jdbc/datasource/driverClassName").toString());
         setMaximumPoolSize(Integer.parseInt(envContext.lookup("jdbc/datasource/maxActive").toString()));
         setMinimumIdle(Integer.parseInt(envContext.lookup("jdbc/datasource/minIdle").toString()));
         setIdleTimeout(Integer.parseInt(envContext.lookup("jdbc/datasource/idleTimeout").toString()));
         setConnectionTimeout(Integer.parseInt(envContext.lookup("jdbc/datasource/connectionTimeout").toString()));
      } catch (NamingException e) {
         e.printStackTrace();
      }
   }
}


<Resource name="jdbc/MyCustomDataSource" auth="Container"
          type="javax.sql.DataSource"
          factory="com.zaxxer.hikari.HikariJNDIFactory"
          dataSourceClassName="com.mysql.cj.jdbc.MysqlDataSource"
          maximumPoolSize="10"
          jdbcUrl="jdbc:mysql://localhost:3306/mydatabase" />
          
          import com.liferay.portal.kernel.dao.jdbc.DataAccess;
import com.liferay.portal.kernel.dao.jdbc.DataSourceFactory;
import com.liferay.portal.kernel.dao.jdbc.PoolConnectionHandler;
import com.liferay.portal.kernel.dao.jdbc.pool.BaseDataSource;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

public class MyDataSource extends BaseDataSource {

    public MyDataSource() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:mysql://localhost:3306/mydatabase");
        config.setUsername("root");
        config.setPassword("mypassword");

        setDataSource(new HikariDataSource(config));
    }

    @Override
    public Connection getConnection() throws SQLException {
        return super.getConnection();
    }

}

public class CustomDataSource implements DataSource {

    private final DataSource dataSource;

    public CustomDataSource() {
        // initialize the datasource
        dataSource = createDataSource();
    }

    private DataSource createDataSource() {
        // create and configure the datasource
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:mysql://localhost/mydatabase");
        config.setUsername("myuser");
        config.setPassword("mypassword");
        config.setMaximumPoolSize(10);
        return new HikariDataSource(config);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return dataSource.getConnection();
    }

    @Override
    public Connection getConnection(String username, String password) throws SQLException {
        return dataSource.getConnection(username, password);
    }

    // other methods from the javax.sql.DataSource interface

}
