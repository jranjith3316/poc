import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ec2.Ec2Client;
import software.amazon.awssdk.services.ec2.model.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;

public class EC2InfoPrinter {
    public static void main(String[] args) {
        try {
            // Create an instance of the AWS EC2 client
            Ec2Client ec2Client = Ec2Client.builder()
                    .region(Region.AWS_GLOBAL)
                    .credentialsProvider(DefaultCredentialsProvider.create())
                    .build();

            // Get the current instance ID from instance metadata
            String currentInstanceId = getInstanceIdFromMetadata();
            System.out.println("Current Instance ID: " + currentInstanceId);
            System.out.println();

            // Describe instances
            DescribeInstancesRequest request = DescribeInstancesRequest.builder().build();
            DescribeInstancesResponse response = ec2Client.describeInstances(request);

            // Iterate over the reservations and instances
            for (Reservation reservation : response.reservations()) {
                for (Instance instance : reservation.instances()) {
                    // Retrieve instance details
                    String instanceId = instance.instanceId();
                    String instanceType = instance.instanceTypeAsString();
                    String state = instance.state().name();
                    String publicIpAddress = instance.publicIpAddress();
                    String privateIpAddress = instance.privateIpAddress();

                    // Print instance information
                    System.out.println("Instance ID: " + instanceId);
                    System.out.println("Instance Type: " + instanceType);
                    System.out.println("State: " + state);
                    System.out.println("Public IP Address: " + publicIpAddress);
                    System.out.println("Private IP Address: " + privateIpAddress);

                    // Check if the current instance
                    if (instanceId.equals(currentInstanceId)) {
                        System.out.println("** This is the current logged-in instance **");
                    }

                    System.out.println(); // Add empty line between instances
                }
            }

            // Close the EC2 client
            ec2Client.close();
        } catch (Ec2Exception e) {
            System.err.println("An error occurred while retrieving EC2 information: " + e.getMessage());
        } catch (SdkClientException e) {
            System.err.println("An error occurred while communicating with AWS services: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
        }
    }

    private static String getInstanceIdFromMetadata() throws IOException {
        URL url = new URL("http://169.254.169.254/latest/meta-data/instance-id");
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8))) {
            return reader.readLine();
        }
    }
}


SdkClientException cannot be resolved to a type

No exception of type Ec2Exception can be thrown; an exception type must be a subclass of Throwable

The method close() is undefined for the type Ec2Client

Type mismatch: cannot convert from InstanceStateName to String

The type software.amazon.awssdk.core.SdkPojo cannot be resolved. It is indirectly referenced from required .class files

The type software.amazon.awssdk.core.exception.SdkClientException cannot be resolved. It is indirectly referenced from required .class files

The method build() is undefined for the type Ec2ClientBuilder


import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ec2.Ec2Client;
import software.amazon.awssdk.services.ec2.model.*;

public class EC2InfoPrinter {
    public static void main(String[] args) {
        try {
            // Create an instance of the AWS EC2 client
            Ec2Client ec2Client = Ec2Client.builder()
                    .region(Region.AWS_GLOBAL)
                    .credentialsProvider(DefaultCredentialsProvider.create())
                    .build();

            // Get the current instance ID from instance metadata
            String currentInstanceId = getInstanceIdFromMetadata();
            System.out.println("Current Instance ID: " + currentInstanceId);
            System.out.println();

            // Describe instances
            DescribeInstancesResponse response = ec2Client.describeInstances();
            for (Reservation reservation : response.reservations()) {
                for (Instance instance : reservation.instances()) {
                    // Retrieve instance details
                    String instanceId = instance.instanceId();
                    String instanceType = instance.instanceTypeAsString();
                    InstanceState state = instance.state();
                    String publicIpAddress = instance.publicIpAddress();
                    String privateIpAddress = instance.privateIpAddress();

                    // Print instance information
                    System.out.println("Instance ID: " + instanceId);
                    System.out.println("Instance Type: " + instanceType);
                    System.out.println("State: " + state.nameAsString());
                    System.out.println("Public IP Address: " + publicIpAddress);
                    System.out.println("Private IP Address: " + privateIpAddress);

                    // Check if the current instance
                    if (instanceId.equals(currentInstanceId)) {
                        System.out.println("** This is the current logged-in instance **");
                    }

                    System.out.println(); // Add empty line between instances
                }
            }

            // Close the EC2 client
            ec2Client.close();
        } catch (Exception e) {
            System.err.println("An error occurred: " + e.getMessage());
        }
    }

    private static String getInstanceIdFromMetadata() {
        try {
            String url = "http://169.254.169.254/latest/meta-data/instance-id";
            java.net.HttpURLConnection conn = (java.net.HttpURLConnection) new java.net.URL(url).openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(1000);
            conn.setReadTimeout(1000);
            int status = conn.getResponseCode();
            if (status == 200) {
                java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(conn.getInputStream()));
                String line;
                if ((line = br.readLine()) != null) {
                    return line;
                }
                br.close();
            }
        } catch (Exception e) {
            System.err.println("Failed to retrieve current instance ID: " + e.getMessage());
        }
        return null;
    }
}

Caused by: java.lang.NoClassDefFoundError: software/amazon/awssdk/auth/credentials/AwsCredentialsProvider

import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
import software.amazon.awssdk.auth.credentials.AwsCredentialsProviderChain;
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.auth.credentials.SystemPropertyCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ec2.Ec2Client;
import software.amazon.awssdk.services.ec2.model.*;

public class EC2InfoPrinter {

    public static void main(String[] args) {
        // Create the AWS credentials provider chain
        AwsCredentialsProvider credentialsProvider = AwsCredentialsProviderChain.builder()
                .addCredentialsProvider(ProfileCredentialsProvider.create("custom-profile"))
                .addCredentialsProvider(SystemPropertyCredentialsProvider.create())
                .build();


An error occurred: Unable to load an HTTP implementation from any provider in the chain. You must declare a dependency on an appropriate HTTP implementation or pass in an SdkHttpClient explicitly to the client builder.

ec2Client.describeInstances();

Exception in thread "main" java.lang.NoClassDefFoundError: software/amazon/awssdk/protocols/jsoncore/JsonNode
	at software.amazon.awssdk.services.ec2.endpoints.internal.DefaultPartitionDataProvider.doLoadPartitions(DefaultPartitionDataProvider.java:103)
	at software.amazon.awssdk.utils.Lazy.getValue(Lazy.java:50)
	at software.amazon.awssdk.services.ec2.endpoints.internal.DefaultPartitionDataProvider.loadPartitions(DefaultPartitionDataProvider.java:99)
	at software.amazon.awssdk.services.ec2.endpoints.internal.PartitionFn.loadPartitionData(PartitionFn.java:97)
	at software.amazon.awssdk.services.ec2.endpoints.internal.PartitionFn$LazyValue.value(PartitionFn.java:131)
	at software.amazon.awssdk.services.ec2.endpoints.internal.PartitionFn.evalArg(PartitionFn.java:62)
	at software.amazon.awssdk.services.ec2.endpoints.internal.SingleArgFn.eval(SingleArgFn.java:31)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.visitPartition(RuleEvaluator.java:58)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.visitPartition(RuleEvaluator.java:20)
	at software.amazon.awssdk.services.ec2.endpoints.internal.PartitionFn.acceptFnVisitor(PartitionFn.java:51)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.visitFn(RuleEvaluator.java:53)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.visitFn(RuleEvaluator.java:20)
	at software.amazon.awssdk.services.ec2.endpoints.internal.Fn.accept(Fn.java:43)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.evaluateCondition(RuleEvaluator.java:151)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.lambda$handleRule$4(RuleEvaluator.java:120)
	at software.amazon.awssdk.services.ec2.endpoints.internal.Scope.inScope(Scope.java:55)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.handleRule(RuleEvaluator.java:118)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.access$000(RuleEvaluator.java:21)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator$1.visitTreeRule(RuleEvaluator.java:129)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator$1.visitTreeRule(RuleEvaluator.java:125)
	at software.amazon.awssdk.services.ec2.endpoints.internal.TreeRule.accept(TreeRule.java:30)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.lambda$handleRule$4(RuleEvaluator.java:125)
	at software.amazon.awssdk.services.ec2.endpoints.internal.Scope.inScope(Scope.java:55)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.handleRule(RuleEvaluator.java:118)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.access$000(RuleEvaluator.java:21)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator$1.visitTreeRule(RuleEvaluator.java:129)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator$1.visitTreeRule(RuleEvaluator.java:125)
	at software.amazon.awssdk.services.ec2.endpoints.internal.TreeRule.accept(TreeRule.java:30)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.lambda$handleRule$4(RuleEvaluator.java:125)
	at software.amazon.awssdk.services.ec2.endpoints.internal.Scope.inScope(Scope.java:55)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.handleRule(RuleEvaluator.java:118)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.lambda$evaluateRuleset$2(RuleEvaluator.java:31)
	at software.amazon.awssdk.services.ec2.endpoints.internal.Scope.inScope(Scope.java:55)
	at software.amazon.awssdk.services.ec2.endpoints.internal.RuleEvaluator.evaluateRuleset(RuleEvaluator.java:25)
	at software.amazon.awssdk.services.ec2.endpoints.internal.DefaultRuleEngine.evaluate(DefaultRuleEngine.java:25)
	at software.amazon.awssdk.services.ec2.endpoints.internal.DefaultEc2EndpointProvider.resolveEndpoint(DefaultEc2EndpointProvider.java:37)
	at software.amazon.awssdk.services.ec2.endpoints.internal.Ec2ResolveEndpointInterceptor.modifyRequest(Ec2ResolveEndpointInterceptor.java:43)
	at software.amazon.awssdk.core.interceptor.ExecutionInterceptorChain.modifyRequest(ExecutionInterceptorChain.java:68)
	at software.amazon.awssdk.awscore.internal.AwsExecutionContextBuilder.runInitialInterceptors(AwsExecutionContextBuilder.java:179)
	at software.amazon.awssdk.awscore.internal.AwsExecutionContextBuilder.invokeInterceptorsAndCreateExecutionContext(AwsExecutionContextBuilder.java:115)
	at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.invokeInterceptorsAndCreateExecutionContext(AwsSyncClientHandler.java:69)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.lambda$execute$1(BaseSyncClientHandler.java:78)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.measureApiCallSuccess(BaseSyncClientHandler.java:179)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:76)
	at software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45)
	at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:56)
	at software.amazon.awssdk.services.ec2.DefaultEc2Client.describeInstances(DefaultEc2Client.java:18955)
	at software.amazon.awssdk.services.ec2.Ec2Client.describeInstances(Ec2Client.java:28261)
	at com.liferay.fepoc.AWSEC2InfoPrinter.main(AWSEC2InfoPrinter.java:33)
Caused by: java.lang.ClassNotFoundException: software.amazon.awssdk.protocols.jsoncore.JsonNode
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 49 more


